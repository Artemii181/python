#1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
# В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия. Для выполнения
# расчета для конкретных значений необходимо запускать скрипт с параметрами.

# import sys
# hours, salary, bonus = map(float, sys.argv[1:])
# print('Salary {}'.format(hours * salary + bonus))

import file_name
name, time, salary, bonus = file_name.sal()
try:
    time = int(time)
    salary = int(salary)
    bonus = int(bonus)
    res = time * salary + bonus
    print(f'заработная плата сотрудника  {res}')
except ValueError:
    print('Not a number')


#2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

# my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
# new_my_list = [num for i, num in enumerate(my_list) if my_list[i] > my_list[i - 1] and i != 0]
# print(new_my_list)

#3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
#Подсказка: использовать функцию range() и генератор.

# print([x for x in range(20, 241) if x % 20 == 0 or x % 21 ==0])


#4. Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать итоговый массив чисел,
# соответствующих требованию. Элементы вывести в порядке их следования в исходном списке. Для выполнения задания обязательно использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

# my_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
# new_list = [x for x in my_list if my_list.count(x) == 1]
# print(new_list)

#5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти четные числа
# от 100 до 1000 (включая границы). Необходимо получить результат вычисления произведения всех элементов списка.
#Подсказка: использовать функцию reduce().

# from functools import reduce
# def new_list(n1, n2):
#     return n1 * n2
# my_list = [x for x in range(100, 1000) if x % 2 == 0]
# print(reduce(new_list, my_list))

#6. Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
# Подсказка: использовать функцию count() и cycle() модуля itertools. Обратите внимание,
# что создаваемый цикл не должен быть бесконечным. Необходимо предусмотреть условие его завершения.
# Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл.
# Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.

#a
# from itertools import count, cycle
# for i in count(int(input('Введите стартовое число - '))):
#     print(i)
#     if i >= 10:
#         break
#
# #b
# my_list = [1, 5, 3, 10, 11, 7, 8, 2, 4, 6, 9]
# for i in cycle(my_list):
#     print(i)
#     if i >= 11:
#         break
